[{"categories":null,"content":"当我们在另外一台电脑上，如何去恢复已有的hugo项目，这里把相关步骤记录下来。","date":"2022-06-08","objectID":"/how-to-recovery-hugo-project-in-another-computer/","tags":null,"title":"如何恢复已有的hugo项目，以及基本的使用方法","uri":"/how-to-recovery-hugo-project-in-another-computer/"},{"categories":null,"content":"新建博客： 使用hugo来建立自己的博客 ","date":"2022-06-08","objectID":"/how-to-recovery-hugo-project-in-another-computer/:0:0","tags":null,"title":"如何恢复已有的hugo项目，以及基本的使用方法","uri":"/how-to-recovery-hugo-project-in-another-computer/"},{"categories":null,"content":"安装hugo brew install hugo ","date":"2022-06-08","objectID":"/how-to-recovery-hugo-project-in-another-computer/:1:0","tags":null,"title":"如何恢复已有的hugo项目，以及基本的使用方法","uri":"/how-to-recovery-hugo-project-in-another-computer/"},{"categories":null,"content":"下载仓库 git clone --recursive https://github.com/b4c5/b4c5.github.io.git blog ","date":"2022-06-08","objectID":"/how-to-recovery-hugo-project-in-another-computer/:2:0","tags":null,"title":"如何恢复已有的hugo项目，以及基本的使用方法","uri":"/how-to-recovery-hugo-project-in-another-computer/"},{"categories":null,"content":"创建新文章 cd blog hugo new posts/how-to-use-hugo.md 将在content/posts目录，创建 how-to-use-hugo.md 文件。同时，文件开头 (Front Matter) 放入yaml格式的meta信息 --- title: \"如何使用Hugo\" date: 2022-06-08T11:26:22+08:00 draft: true --- 其中，draft 字段表示该文章默认不会发表，当改成 false 后，hugo 渲染时才会生成文章。 ","date":"2022-06-08","objectID":"/how-to-recovery-hugo-project-in-another-computer/:3:0","tags":null,"title":"如何恢复已有的hugo项目，以及基本的使用方法","uri":"/how-to-recovery-hugo-project-in-another-computer/"},{"categories":null,"content":"在本地运行网站 hugo server --disableFastRender –disableFastRender: 关闭快速渲染模式，开启全部渲染（当有本地修改时）。 访问 http://localhost:1313 。该服务将持续运行，所以，你修改本地文件后，页面上将自动反映出最新的修改。 ","date":"2022-06-08","objectID":"/how-to-recovery-hugo-project-in-another-computer/:4:0","tags":null,"title":"如何恢复已有的hugo项目，以及基本的使用方法","uri":"/how-to-recovery-hugo-project-in-another-computer/"},{"categories":null,"content":"生成文章 hugo -D docs -D： 将文章内容标记为 draft 文件也生成文章， 忽略 draft 属性。 docs： 生成到 docs 目录 ","date":"2022-06-08","objectID":"/how-to-recovery-hugo-project-in-another-computer/:5:0","tags":null,"title":"如何恢复已有的hugo项目，以及基本的使用方法","uri":"/how-to-recovery-hugo-project-in-another-computer/"},{"categories":null,"content":"上传到gitpage git add . git commit -m '新文章：xxx' git push origin 等10分钟后，github上面将生效。 ","date":"2022-06-08","objectID":"/how-to-recovery-hugo-project-in-another-computer/:6:0","tags":null,"title":"如何恢复已有的hugo项目，以及基本的使用方法","uri":"/how-to-recovery-hugo-project-in-another-computer/"},{"categories":null,"content":"git仓库存在不需要的提交记录，需要清空重建，在这种情况下，如何操作？","date":"2022-04-12","objectID":"/clear-github-repo-history-and-recreate/","tags":null,"title":"如何清空github仓库历史的全部历史提交记录","uri":"/clear-github-repo-history-and-recreate/"},{"categories":null,"content":"**目的：**把仓库清空，重建。 ","date":"2022-04-12","objectID":"/clear-github-repo-history-and-recreate/:0:0","tags":null,"title":"如何清空github仓库历史的全部历史提交记录","uri":"/clear-github-repo-history-and-recreate/"},{"categories":null,"content":"方案一：删除.git，并强制push 原理： 删除.git目录，重新建立git， 并将本地内容强制push到远程仓库上，实现本地、远程仓库的提交记录清空。 详细步骤： .git目录保存了所有的提交历史，删除该目录，即删除了git所有的历史提交信息 通过git init,重新初始化本地项目 关联github上的项目 git remote add origin git@github.com/../....git 强制提交，覆盖 git push -u --force origin master:main 代码细节（包含了submodule)： rm -rf .git rm -rf themes/LoveIt # 如果有submodule，则把submodule全部删除 git init git config user.name b4c5 git config user.email blaket@qq.com git branch -m main # 与github保持一致，主干分支都叫main git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt git remote add origin git@github-b4c5:b4c5/b4c5.github.io.git git add . git commit -m 'init' git push -u --force origin main # 这一步是关键，强制覆盖远程仓库 # 如果仓库没有改名，是master的话，则使用 # git push -u --force origin master:main # more generally: # git push \u003cremote\u003e \u003clocal branch name\u003e:\u003cremote branch to push into\u003e 参考链接： git-clearHistory ","date":"2022-04-12","objectID":"/clear-github-repo-history-and-recreate/:1:0","tags":null,"title":"如何清空github仓库历史的全部历史提交记录","uri":"/clear-github-repo-history-and-recreate/"},{"categories":null,"content":"方案二：下载孤立版本，并强制push 直接删除.git可能会有问题，特别是有submodule的仓库。 git checkout --orphan newBranch # git add -A # Add all files and commit them git commit git branch -D master # Deletes the master branch git branch -m master # Rename the current branch to master git push -f origin master # Force push master branch to github git gc --aggressive --prune=all # remove the old files 参考链接： Make the current commit the only (initial) commit in a Git repository? ","date":"2022-04-12","objectID":"/clear-github-repo-history-and-recreate/:2:0","tags":null,"title":"如何清空github仓库历史的全部历史提交记录","uri":"/clear-github-repo-history-and-recreate/"},{"categories":null,"content":"使用hugo来建立自己的博客 ","date":"2022-04-11","objectID":"/how-to-install-hugo-and-github-page/:0:0","tags":null,"title":"使用hugo来建立自己的博客","uri":"/how-to-install-hugo-and-github-page/"},{"categories":null,"content":"一、hugo初始化博客 # 安装 brew install hugo hugo version # 初始化博客目录 hugo new site /Volumes/Work/blog cd /Volumes/Work/blog git init git config user.name b4c5 git config user.email blaket@qq.com touch .nojekyll # 关掉github pages 自带的jekyll # 使用LoveIt主题，当然也可以用其它主题 git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt # 覆盖默认配置 cp themes/LoveIt/exampleSite/config.toml . vim config.toml # 修改内容参见修改config.toml hugo -d docs # 将静态文件生成到docs目录下，与后面的Github Pages Source的设置要对应 hugo server -D # 在本地运行hugo, 访问：http://localhost:1313/ ","date":"2022-04-11","objectID":"/how-to-install-hugo-and-github-page/:1:0","tags":null,"title":"使用hugo来建立自己的博客","uri":"/how-to-install-hugo-and-github-page/"},{"categories":null,"content":"修改config.toml baseURL，改成网站域名 注释themesDir 修改title为网站名字 修改后的完整内容见下： baseURL = \"https://b4c5.github.io\" # [en, zh-cn, fr, pl, ...] determines default content language # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # theme # 主题 theme = \"LoveIt\" # themes directory # 主题目录 # themesDir = \"../..\" # website title # 网站标题 title = \"b4c5\" # 生成HTML的目录， 默认为public publishDir = \"docs\" 参考 [1] Configure Hugo | Hugo ","date":"2022-04-11","objectID":"/how-to-install-hugo-and-github-page/:1:1","tags":null,"title":"使用hugo来建立自己的博客","uri":"/how-to-install-hugo-and-github-page/"},{"categories":null,"content":"二、配置github Pages 也可以参考：官方手册 创建仓库b4c5.github.io 仓库的名字，必须是\u003cusername\u003e.github.io，其中username必须是你的github名字。 仓库必须为公开 仓库Pages设置：settings → Pages 页面路径指定（Source） 建议选择：Branch:main, /docs,这样在该仓库的docs目录下，为网站的根目录 注：根目录放index.html可以验证是否可以访问网站 ","date":"2022-04-11","objectID":"/how-to-install-hugo-and-github-page/:2:0","tags":null,"title":"使用hugo来建立自己的博客","uri":"/how-to-install-hugo-and-github-page/"},{"categories":null,"content":"三、ssh添加密钥 生成公私钥，并完成相关配置 ssh-keygen -t rsa -f id_rsa_github_b4c5 # 生成公私鈅对 vim ~/.ssh/config # 添加b4c5 ssh配置，内容见后面 b4c5 ssh配置 Host github-b4c5 # 部分需要代理的环境才需要 ProxyCommand corkscrew 127.0.0.1 12679 %h %p Port 22 # 指定证书，用于b4c5的网站发布 HostName github.com User git IdentityFile ~/.ssh/id_rsa_github_b4c5 在github上，添加ssh公钥 settings → SSH and GPG keys → SSH keys → New SSH key Key一栏，填入 id_rsa_github_b4c5.pub的文件内容 经过上述配置后，b4c5的github，使用git的方式为： git clone git@github-b4c5:b4c5/b4c5.github.io.git ","date":"2022-04-11","objectID":"/how-to-install-hugo-and-github-page/:3:0","tags":null,"title":"使用hugo来建立自己的博客","uri":"/how-to-install-hugo-and-github-page/"},{"categories":null,"content":"三、上传github Pages文件 git remote add origin git@github-b4c5:b4c5/b4c5.github.io.git # 将本地 git 项目与 github 项目相关联 git fetch origin # 拉取 github 项目 git checkout main #切换到主分支 main git add . # 在这一步可能会报警告，处理方法见后面。 git commit -m \"init github pages\" git push origin # 推送成功后，一般10～20分钟后，github page才会正常工作，但也有可能会报错，这些报错的定位，参见后面内容 git add . 出现警告的解决方案 ref: No url found for submodule path 警告内容： hint: You’ve added another git repository inside your current repository. hint: Clones of the outer repository will not contain the contents of hint: the embedded repository and will not know how to obtain it. hint: If you meant to add a submodule, use: hint: hint: git submodule add themes/LoveIt hint: hint: If you added this path by mistake, you can remove it from the hint: index with: hint: hint: git rm –cached themes/LoveIt hint: hint: See “git help submodule” for more information. 根本原因： 项目根目录不存在.gitmodules文件，或者该文件中的submodule没有url。 解决方法： 其实就是按提示操作就可以。 git rm --cached themes/LoveIt git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 最终效果： 在项目根目录存在.gitmodules文件，该文件内容如下： [submodule \"themes/LoveIt\"] path = themes/LoveIt url = https://github.com/dillonzq/LoveIt.git github Pages 仍然404的原因 在实操中，我因为上订完git submodule的问题，导致使用https://b4c5.github.io访问显示404的情况，这种问题该怎么定位呢？ 在github仓库的commit上，可以看到详细的日志。如下图所示： ","date":"2022-04-11","objectID":"/how-to-install-hugo-and-github-page/:4:0","tags":null,"title":"使用hugo来建立自己的博客","uri":"/how-to-install-hugo-and-github-page/"},{"categories":null,"content":"参考 [1] Hugo官方文档 ","date":"2022-04-11","objectID":"/how-to-install-hugo-and-github-page/:5:0","tags":null,"title":"使用hugo来建立自己的博客","uri":"/how-to-install-hugo-and-github-page/"}]